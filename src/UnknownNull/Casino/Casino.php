<?php

namespace UnknownNull\Casino;

use onebone\economyapi\EconomyAPI;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\network\mcpe\protocol\PlaySoundPacket;
use pocketmine\player\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use Vecnavium\FormsUI\CustomForm;
use Vecnavium\FormsUI\SimpleForm;

class Casino extends PluginBase
{
    protected Config $config;
    protected EconomyAPI $EconomyAPI;

    protected function onEnable(): void
    {
        $this->saveResource("config.yml");
        $this->config = new Config($this->getDataFolder() . "config.yml");

        $this->EconomyAPI = EconomyAPI::getInstance();
    }

    public function onCommand(CommandSender $sender, Command $command, string $label, array $args): bool
    {
        if ($sender instanceof Player) {
            if ($command->getName() == "casino") {
                $this->MainFormCasino($sender);
            }
        }
        return parent::onCommand($sender, $command, $label, $args); // TODO: Change the autogenerated stub
    }

    public function MainFormCasino(Player $player): void
    {
        $form = new CustomForm(function (Player $player, $data) {
            if ($data === null) {
                return false;
            }

            $amount = $data[0];
            $MyMoney = $this->EconomyAPI->myMoney(strtolower($player->getName()));
            $Maximumamount = $this->config->getNested("Maximum-amount");
            $Minimumamount = $this->config->getNested("Minimum-amount");

            if (isset($data[0])) {
                if (is_int((int)$amount)) {
                    if ($amount <= $Maximumamount and $amount >= $Minimumamount) {
                        if ($MyMoney >= $amount) {
                            $this->TowFormCasino($player, $amount);
                        }else{
                            $player->sendMessage("§4Your money is not enough!");
                        }
                    }else{
                        $player->sendMessage("§4The amount of money you can place must be between $Minimumamount and $Maximumamount!");
                    }
                }else{
                    $player->sendMessage("§4Enter an integer!");
                }
            }else{
                $player->sendMessage("§4The amount of money was not entered!");
            }

            return true;
        });
        $MyMoney = $this->EconomyAPI->myMoney(strtolower($player->getName()));
        $Maximumamount = $this->config->getNested("Maximum-amount");
        $Minimumamount = $this->config->getNested("Minimum-amount");

        $form->setTitle("§l§6Casino");
        $form->addInput("§9Your Money: §6$MyMoney\n§7The allowed range of the amount of money you can bet: §2$Minimumamount §7- §2$Maximumamount\n§3Enter the amount you want to bet on:");
        $player->sendForm($form);
    }

    public function TowFormCasino(Player $player, int $amount): void
    {
        $form = new SimpleForm(function (Player $player, $data) use ($amount) {
            if (is_null($data)) {
                return true;
            }
            $x2 = ["Win","Lost","Win","Lost","Win","Lost","Win","Lost","Win","Lost"]; // If you do not know what you are doing, please do not change
            $x3 = ["Lost","Lost","Win","Lost","Win","Lost","Win","Lost","Lost","Lost"]; // If you do not know what you are doing, please do not change
            $x5 = ["Lost","Lost","Win","Lost","Win","Lost","Lost","Lost","Lost","Lost"]; // If you do not know what you are doing, please do not change
            $x10 = ["Lost","Lost","Lost","Lost","Win","Lost","Lost","Lost","Lost","Lost"]; // If you do not know what you are doing, please do not change

            $PlayerName = strtolower($player->getName());

            switch ($data) {

                case 0:
                    $Result = array_rand($x2);
                    if($x2[$Result] == "Win"){
                        $WinAmount = $amount * 2 - $amount;
                        $this->EconomyAPI->addMoney($PlayerName,$WinAmount);
                        $player->sendMessage("§aYou Win §e$WinAmount");
                        $this->PlaySound($player,"firework.launch", 1, 1);

                    }elseif($x2[$Result] == "Lost"){
                        $this->EconomyAPI->reduceMoney($PlayerName,$amount);
                        $player->sendMessage("§4You Lost §e$amount");
                        $this->PlaySound($player,"mob.villager.idle", 1, 1);
                    }else{
                        $player->sendMessage("Error!");
                    }
                    break;

                case 1:
                    $Result = array_rand($x3);
                    if($x3[$Result] == "Win"){
                        $WinAmount = $amount * 3 - $amount;
                        $this->EconomyAPI->addMoney($PlayerName,$WinAmount);
                        $player->sendMessage("§aYou Win §e$WinAmount");
                        $this->PlaySound($player,"firework.launch", 1, 1);

                    }elseif($x3[$Result] == "Lost"){
                        $this->EconomyAPI->reduceMoney($PlayerName,$amount);
                        $player->sendMessage("§4You Lost §e$amount");
                        $this->PlaySound($player,"mob.villager.idle", 1, 1);
                    }else{
                        $player->sendMessage("Error!");
                    }
                    break;

                case 2:
                    $Result = array_rand($x5);
                    if($x5[$Result] == "Win"){
                        $WinAmount = $amount * 5 - $amount;
                        $this->EconomyAPI->addMoney($PlayerName,$WinAmount);
                        $player->sendMessage("§aYou Win §e$WinAmount");
                        $this->PlaySound($player,"firework.launch", 1, 1);

                    }elseif($x5[$Result] == "Lost"){
                        $this->EconomyAPI->reduceMoney($PlayerName,$amount);
                        $player->sendMessage("§4You Lost §e$amount");
                        $this->PlaySound($player,"mob.villager.idle", 1, 1);
                    }else{
                        $player->sendMessage("Error!");
                    }
                    break;

                case 3:
                    $Result = array_rand($x10);
                    if($x10[$Result] == "Win"){
                        $WinAmount = $amount * 10 - $amount;
                        $this->EconomyAPI->addMoney($PlayerName,$WinAmount);
                        $player->sendMessage("§aYou Win §e$WinAmount");
                        $this->PlaySound($player,"firework.launch", 1, 1);

                    }elseif($x10[$Result] == "Lost"){
                        $this->EconomyAPI->reduceMoney($PlayerName,$amount);
                        $player->sendMessage("§4You Lost §e$amount");
                        $this->PlaySound($player,"mob.villager.idle", 1, 1);
                    }else{
                        $player->sendMessage("Error!");
                    }
                    break;

                case 4:
                    break;

            }
            return true;
        });
        $form->setTitle("§l§6Casino");
        $form->setContent("§eTry your luck ;D");
        $form->addButton("§l§3x2\n§r§050 Percent Win rate");
        $form->addButton("§l§3x3\n§r§030 Percent Win rate");
        $form->addButton("§l§3x5\n§r§020 Percent Win rate");
        $form->addButton("§l§3x10\n§r§010 Percent% Win rate");
        $form->addButton("§l§cCancel\n§r§0Click", 0, "textures/ui/cancel");
        $player->sendForm($form);
    }

    public function PlaySound(Player $player, string $sound, int $volume, float $pitch): void
    {
        $packet = new PlaySoundPacket();
        $packet->x = $player->getPosition()->getX();
        $packet->y = $player->getPosition()->getY();
        $packet->z = $player->getPosition()->getZ();
        $packet->soundName = $sound;
        $packet->volume = $volume;
        $packet->pitch = $pitch;
        $player->getNetworkSession()->sendDataPacket($packet);
    }
}
